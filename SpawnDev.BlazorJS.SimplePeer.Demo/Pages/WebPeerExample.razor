@page "/WebPeerExample"
@using SpawnDev.BlazorJS.JSObjects;
@using System.Text;
@using System.Text.Json;
@using SpawnDev.BlazorJS.JSObjects.WebRTC;
@using SpawnDev.BlazorJS.SimplePeer.WebPeer;
@implements IDisposable

<PageTitle>SpawnDev.BlazorJS.SimplePeer</PageTitle>

<h1>SpawnDev.BlazorJS.SimplePeer</h1>

<p>
    An "offer" will be generated by the initiator. Paste this into the receiver's form and
    hit submit. The receiver generates an "answer". Paste this into the initiator's form and
    hit submit. <a href="https://github.com/feross/simple-peer?tab=readme-ov-file#usage">Original Example</a>
</p>
<br />
<a href="@($"{new Uri(NavigationManager.Uri).GetLeftPart(UriPartial.Path)}")" target="_blank">Open in new window</a>
<br />

<div>
    Role: @peerRole<br />
    <button disabled="@(webPeer != null)" class="btn btn-primary" @onclick="@(()=>Init(true))">Create Initiator</button>
    <button disabled="@(webPeer != null)" class="btn btn-primary" @onclick="@(()=>Init(false))">Create Receiver</button>
</div>

<div>
    <textarea style="width: 600px; word-wrap: break-word; white-space: normal;" @bind=@incoming></textarea>
    <button disabled="@(webPeer == null)" @onclick=@Submit>submit</button>
</div>
<div>
    <button @onclick=@CallMethodTest>call method</button>
</div>
<div>
    <pre style="width: 600px; word-wrap: break-word; white-space: normal;">@((MarkupString)outgoing)</pre>
</div>
<div>
    <pre style="width: 600px; word-wrap: break-word; white-space: normal;">@((MarkupString)log)</pre>
</div>

@code {
    [Inject] NavigationManager NavigationManager { get; set; }
    [Inject] BlazorJSRuntime JS { get; set; }
    [Inject] IServiceProvider ServiceProvider { get; set; }

    string peerRole => webPeer == null ? "(select)" : (webPeer.Connection!.Initiator ? "initiator" : "receiver");
    WebPeer? webPeer = null;
    string outgoing = "";
    string incoming = "";
    string log = "";

    void Init(bool initiator)
    {
        var peerOptions = new SimplePeerOptions
            {
                Initiator = initiator,
                Trickle = false,
                ObjectMode = false,
            };
        webPeer = new WebPeer(ServiceProvider, new SimplePeer(peerOptions));
        webPeer.Connection!.OnError += SimplePeer_OnError;
        webPeer.Connection.OnSignal += SimplePeer_OnSignal;
        webPeer.Connection.OnConnect += SimplePeer_OnConnect;
        webPeer.Connection.OnClose += SimplePeer_OnClose;

        InstanceConsoleLog = Log;

        // sets _peer global var for debugging in dev tools
        JS.Set("_peer", webPeer);
    }

    void Submit()
    {
        webPeer!.Connection!.Signal(JSON.Parse(incoming)!);
    }

    async Task CallMethodTest()
    {
        if (webPeer == null) return;
        try
        {
            var logIgRet = await webPeer!.Run(() => ConsoleLog("remote log", null));
            Log($"logIgRet: {logIgRet}");
        }
        catch (Exception ex)
        {
            JS.Log($"CallMethodTest error: {ex.Message}");
        }
    }

    void Log(string msg)
    {
        log += $"{msg}<br/>";
        StateHasChanged();
    }

    static long logId = 0;

    [PeerCallable]
    static long ConsoleLog(string msg, [CallSide] WebPeer? peer = null)
    {
        InstanceConsoleLog?.Invoke($"ConsoleLog: {logId} {msg}");
        return logId++;
    }

    static Action<string>? InstanceConsoleLog = null;

    void SimplePeer_OnConnect()
    {
        JS.Log("CONNECT");
        outgoing = "Connected<br/>";
        StateHasChanged();
    }

    void SimplePeer_OnClose()
    {
        JS.Log("CLOSE");
        outgoing += "Closed<br/>";
        StateHasChanged();
    }

    void SimplePeer_OnSignal(JSObject data)
    {
        JS.Log("SIGNAL", JSON.Stringify(data));
        outgoing = JSON.Stringify(data);
        StateHasChanged();
    }

    void SimplePeer_OnError(NodeError error)
    {
        outgoing = error.Code! + "<br/>";
        StateHasChanged();
    }

    public void Dispose()
    {
        if (webPeer != null)
        {
            webPeer.Connection.OnError -= SimplePeer_OnError;
            webPeer.Connection.OnSignal -= SimplePeer_OnSignal;
            webPeer.Connection.OnConnect -= SimplePeer_OnConnect;
            webPeer.Connection.OnClose -= SimplePeer_OnClose;
            webPeer.Dispose();
            webPeer = null;
        }
        InstanceConsoleLog = null;
    }
}
