@page "/ManualConnectExample"
@using SpawnDev.BlazorJS.JSObjects;
@using System.Text.Json;

<PageTitle>Counter</PageTitle>

<h1>SimplePeer Test</h1>

<p>
    This test lets you manually connect two peers. <a href="https://github.com/feross/simple-peer?tab=readme-ov-file#usage">Original Example</a>
</p>

<div>
    <button disabled="@(peer != null)" class="btn btn-primary" @onclick="@(()=>Init(true))">Create Initiator</button>
    <button disabled="@(peer != null)" class="btn btn-primary" @onclick="@(()=>Init(false))">Create Receiver</button>
</div>

<style>
    #outgoing {
        width: 600px;
        word-wrap: break-word;
        white-space: normal;
    }
</style>
<form>
    <textarea id="incoming"></textarea>
    <button disabled="@(peer == null)" type="submit">submit</button>
</form>
<pre id="outgoing"></pre>

@code {
    [Inject] BlazorJSRuntime JS { get; set; }

    bool? Initiator = null;
    SimplePeer? peer = null;

    void Init(bool initiator)
    {
        var document = JS.Get<Document>("document");
        var config = new SimplePeerOptions
            {
                Initiator = initiator,
                Trickle = false
            };
        JS.Log("config", config);
        peer = new SimplePeer(config);

        peer.On<JSObject>("error", err => JS.Log("error", err));

        peer.On<JSObject>("signal", data =>
        {
            JS.Log("SIGNAL", JSON.Stringify(data));
            document.QuerySelector("#outgoing")!.TextContent = JSON.Stringify(data);
        });

        document.QuerySelector("form")!.AddEventListener<Event>("submit", ev =>
        {
            ev.PreventDefault();
            var json = document.QuerySelector<HTMLInputElement>("#incoming")!.Value;
            peer.Signal(JSON.Parse(json)!);
        });

        peer.On("connect", () =>
        {
            JS.Log("CONNECT");
            peer.Send("whatever" + Guid.NewGuid().ToString());
        });

        peer.On<Uint8Array>("data", data =>
        {
            JS.Log("data:", data);

        });
    }
}
