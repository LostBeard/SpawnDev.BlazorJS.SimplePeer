@page "/"
@using SpawnDev.BlazorJS.JSObjects;
@using System.Text;
@using System.Text.Json;
@using SpawnDev.BlazorJS.JSObjects.WebRTC;
@implements IDisposable

<PageTitle>SimplePeer Test</PageTitle>

<h1>SimplePeer Test</h1>

<p>
    An "offer" will be generated by the initiator. Paste this into the receiver's form and
    hit submit. The receiver generates an "answer". Paste this into the initiator's form and
    hit submit. <a href="https://github.com/feross/simple-peer?tab=readme-ov-file#usage">Original Example</a>
</p>

<div>
    Role: @peerRole<br />
    <button disabled="@(peer != null)" class="btn btn-primary" @onclick="@(()=>Init(true))">Create Initiator</button>
    <button disabled="@(peer != null)" class="btn btn-primary" @onclick="@(()=>Init(false))">Create Receiver</button>
</div>

<div>
    <textarea style="width: 600px; word-wrap: break-word; white-space: normal;" @bind=@incoming></textarea>
    <button disabled="@(peer == null)" @onclick=@Submit>submit</button>
</div>
<pre style="width: 600px; word-wrap: break-word; white-space: normal;">@((MarkupString)outgoing)</pre>

@code {
    [Inject] BlazorJSRuntime JS { get; set; }

    string peerRole => peer == null ? "(select)" : (peer.Initiator ? "initiator" : "receiver");
    SimplePeer? peer = null;
    string outgoing = "";
    string incoming = "";

    void Init(bool initiator)
    {
        var peerOptions = new SimplePeerOptions
            {
                Initiator = initiator,
                Trickle = false,
                ObjectMode = false,
            };
        peer = new SimplePeer(peerOptions);
        peer.OnError += SimplePeer_OnError;
        peer.OnSignal += SimplePeer_OnSignal;
        peer.OnConnect += SimplePeer_OnConnect;
        peer.OnClose += SimplePeer_OnClose;
        peer.OnData += SimplePeer_OnData;

        // sets _peer global var for debugging in dev tools
        JS.Set("_peer", peer);
    }

    void Submit()
    {
        peer!.Signal(JSON.Parse(incoming)!);
    }

    void SimplePeer_OnConnect()
    {
        JS.Log("CONNECT");
        outgoing = "Connected<br/>";
        StateHasChanged();
        // test send string
        peer!.Send("Hello " + Guid.NewGuid().ToString());
        // test send byte array (binary data)
        peer!.Send(new byte[] { 65, 66, 67, 68 });
        // test write string
        peer!.Write("Hello " + Guid.NewGuid().ToString());
        // test write byte array (binary data)
        peer!.Write(new byte[] { 65, 66, 67, 68 });
    }

    void SimplePeer_OnClose()
    {
        JS.Log("CLOSE");
        outgoing += "Closed<br/>";
        StateHasChanged();
    }

    void SimplePeer_OnSignal(JSObject data)
    {
        JS.Log("SIGNAL", JSON.Stringify(data));
        outgoing = JSON.Stringify(data);
        StateHasChanged();
    }

    void SimplePeer_OnError(NodeError error)
    {
        outgoing = error.Code! + "<br/>";
        StateHasChanged();
    }

    void SimplePeer_OnData(NodeBuffer data)
    {
        var dataType = data.JSRef!.GetConstructorName();
        JS.Log($"data type: {dataType}");
        switch (dataType)
        {
            case "String":
                // data is actually a string. read in as a string.
                // data will only be received as a string if peerOptions.ObjectMode = true
                outgoing += "String: " + data.JSRef!.As<string>() + "<br/>";
                break;
            default:
                // default is NodeBuffer (due to WebPack it may have had its class name mangled)
                // if peerOptions.ObjectMode = false (default) data will always be a NodeBuffer
                outgoing += "Binary: " + Encoding.UTF8.GetString((byte[])data!) + "<br/>";
                break;
        }
        StateHasChanged();
    }

    public void Dispose()
    {
        if (peer != null)
        {
            peer.OnError -= SimplePeer_OnError;
            peer.OnSignal -= SimplePeer_OnSignal;
            peer.OnConnect -= SimplePeer_OnConnect;
            peer.OnClose -= SimplePeer_OnClose;
            peer.OnData -= SimplePeer_OnData;
            peer.Destroy();
            peer.Dispose();
            peer = null;
        }
    }
}
